
loadEnvSpecificConfig()

apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'groovy'
apply plugin: 'tomcat'
apply plugin: 'java'

targetCompatibility = 1.8
sourceCompatibility = 1.8

configurations.all {
	resolutionStrategy {
		failOnVersionConflict()
		force 'org.springframework:spring-context:4.0.2.RELEASE', 'org.springframework:spring-beans:4.0.2.RELEASE','org.springframework:spring-core:4.0.2.RELEASE',
		'org.springframework:spring-expression:4.0.2.RELEASE','org.springframework:spring-aop:4.0.2.RELEASE','org.springframework:spring-web:4.0.2.RELEASE',
		'javax.servlet:javax.servlet-api:3.1.0','xml-apis:xml-apis:1.3.03'
	}
	exclude group: 'commons-logging'
}

repositories {
    mavenCentral()
}

sourceSets {
	integration {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}
	main {
		java {
			output.classesDir='src/main/webapp/WEB-INF/classes'
		}
	}
}

configurations {
	integrationCompile.extendsFrom testCompile
	integrationRuntime.extendsFrom testRuntime
}

dependencies {
	def tomcatVersion = '7.0.42'
	tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
		   "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
		   "org.apache.tomcat:tomcat-jdbc:${tomcatVersion}",
		   "javax.transaction:javax.transaction-api:1.2",
		   "com.atomikos:transactions:3.9.3",
		   "com.atomikos:transactions-hibernate3:3.9.3",
		   "org.apache.activemq:activemq-all:5.10.0"
		   
	
	//tomcat files("lib/atomikos/atomikos-integration-extension.jar", "lib/atomikos/jta.properties")
				
	tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
		exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
	}
	
	compile group: 'commons-io', name: 'commons-io', version: '1.4'
	compile 'org.springframework:spring-context:4.0.2.RELEASE'
	compile 'org.springframework:spring-orm:4.0.2.RELEASE'
	compile 'org.springframework:spring-webmvc:4.0.2.RELEASE'

	compile 'org.springframework.security:spring-security-config:3.2.4.RELEASE'
	compile 'org.springframework.security:spring-security-web:3.2.4.RELEASE'
	
	compile('org.hibernate:hibernate-entitymanager:4.3.4.Final') {
		exclude group: 'org.jboss.spec.javax.transaction'
	}
	
	providedCompile 'javax.transaction:javax.transaction-api:1.2'
	providedCompile 'com.atomikos:transactions-hibernate3:3.9.3'
	providedCompile 'org.slf4j:jcl-over-slf4j:1.7.6'
	providedCompile 'mysql:mysql-connector-java:5.1.31'
	providedCompile 'org.apache.activemq:activemq-all:5.10.0'
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0', 'javax.servlet:jsp-api:2.0'
	
	
	compile 'org.apache.commons:commons-lang3:3.3'
	compile 'org.slf4j:slf4j-api:1.7.6'
	compile 'org.slf4j:slf4j-log4j12:1.7.6'
	compile 'org.hibernate:hibernate-validator:5.1.0.Final'
	compile 'javax.inject:javax.inject:1'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.3.2'
	compile 'org.openid4java:openid4java:0.9.8'
	compile 'javax.ws.rs:jsr311-api:1.1.1'
	compile 'jstl:jstl:1.2'
	//compile 'javax.jms:jms:1.1'
		
	testCompile 'junit:junit:4.11'
	testCompile 'org.mockito:mockito-all:1.9.5'
	testCompile 'org.springframework:spring-test:4.0.2.RELEASE'
	testCompile 'mysql:mysql-connector-java:5.1.31'
	
	integrationCompile sourceSets.main.output
	integrationCompile configurations.testCompile
	integrationCompile sourceSets.test.output
	integrationRuntime configurations.testRuntime
}

task integrationTest(type: Test, dependsOn: jar) {
	testClassesDir = sourceSets.integration.output.classesDir
	classpath = sourceSets.integration.runtimeClasspath
	systemProperties['jar.path'] = jar.archivePath
}

check.dependsOn integrationTest

def loadEnvSpecificConfig() {
	def environment = project.hasProperty('env') ? project.env : 'local'
	println "Environment is set to $environment"
	def envSpecFile = file('/config/env.json')
	def slurper = new groovy.json.JsonSlurper();
	def config = slurper.parseText(envSpecFile.text)
	def prop = config[environment]
	println "config $prop"
	project.ext.set('env', prop)
}

/** Flyway settings */

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		//classpath "org.flywaydb:flyway-gradle-plugin:3.0"
		classpath "com.googlecode.flyway:flyway-gradle-plugin:2.3"
		classpath 'mysql:mysql-connector-java:5.1.31'
	}
}

apply plugin: 'flyway'

println "flyway.url = $env.flyway.url"
println "flyway.url = $env.flyway.schemas"

flyway {
	url = env.flyway.url
	user = env.flyway.user
	password = env.flyway.password
	schemas = env.flyway.schemas
	initVersion = env.flyway.version
}

/** Tomcat settings */

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.4'
    }
}

tomcat {
	httpPort = 9080
	httpsPort = 9443
	stopPort=9008
	enableSSL = false
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.11'
}

/*eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('xml', 'is what I love')
			}
		}
	}
}*/

/*eclipse {
	project {
		natures.add 'org.eclipse.jdt.groovy.core.groovyNature'
		natures.add 'org.springsource.ide.eclipse.gradle.core.nature'
	}
	classpath {
		file {
			withXml {
				Node node = it.asNode()
				node.appendNode('classpathentry',[exported:"true",kind:"con",path:"GROOVY_SUPPORT"])
				node.appendNode('classpathentry',[exported:"true",kind:"con",path:"GROOVY_DSL_SUPPORT"])
			}
			whenMerged { classpath ->
				classpath.entries.findAll { it.path.contains('JRE_CONTAINER') }.each {
					it.path += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"
				}
			}
		}
	}
}*/