apply plugin: 'java'
apply plugin: 'eclipse'

def cargoHome = "$buildDir/cargo"

ext {
 	tomcatVersion = "7.0.54"
 	atomikosVersion = "3.9.3"
 	activeMqVersion = "5.10.0"
 	jamonVersion = "2.81"
}

configurations {
	tomcatRuntime
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
	tomcatRuntime "javax.transaction:javax.transaction-api:1.2",
		   "com.atomikos:transactions:${atomikosVersion}",
		   "com.atomikos:transactions-hibernate3:${atomikosVersion}",
		   "org.apache.activemq:activemq-all:${activeMqVersion}",
		   "commons-pool:commons-pool:1.6", "com.jamonapi:jamon:${jamonVersion}"
}

/**
* Manual task to manage tomcat lib dependencies
*/
task manageTomcatLib << {
  [ 'tomcatRuntime' ].each { mode ->
    copy {
      from configurations.getByName(mode).files
      into file('/lib/tomcat')
    }
  }
}

/** Tomcat settings */

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.1.1'
    }
}

apply plugin: 'com.bmuschko.cargo'

cargo {
    containerId = 'tomcat7x'
    port = 9080
	
    deployable {
		file = file('../portal-server/build/libs/developer.war')
        context = 'developer'
    }
    
    deployable {
        file = file('../performance/lib/jamon.war')
        context = 'jamon'
    }
    
    local {
      installer {
            installUrl = 'http://mirrors.koehn.com/apache/tomcat/tomcat-7/v7.0.62/bin/apache-tomcat-7.0.62-windows-x64.zip'
            downloadDir = file("build/download")
            extractDir = file("build/extract")
        }
        
        homeDir = file(cargoHome)
        configHomeDir = file(cargoHome)
        logLevel = "medium"
        
		extraClasspath = fileTree(dir: 'lib');
		
		jvmArgs = "-Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n -Xnoagent -Djava.compiler=NONE"
		
		configFile {
            file = file('config/developer.xml')
            toDir = new File("conf/Catalina/localhost")
        }
		
        timeout = 60000

        containerProperties {
            property 'cargo.tomcat.ajp.port', 9099
        }
    }
}

task createCargoHome() {
	doLast {
		if (!file(cargoHome).exists() && !file(cargoHome).mkdirs()) {
			println "Failed to create directory '${cargoHome}'"
		}
	}
}
 
cargoRunLocal.dependsOn createCargoHome

eclipse {
	project {
		name = 'server'
		
		natures.add "org.eclipse.jdt.core.javanature"
		natures.add "org.springsource.ide.eclipse.gradle.core.nature"
		
		buildCommand "org.eclipse.jdt.core.javabuilder"
	}
	
	classpath {
		file {
			whenMerged { classpath ->
				classpath.entries.removeAll { entry -> true }
			}
			withXml {
				Node node = it.asNode()
				node.appendNode("classpathentry",[kind:"con",path:"org.eclipse.jdt.launching.JRE_CONTAINER"])
				node.appendNode("classpathentry",[exported:"true",kind:"con",path:"org.springsource.ide.eclipse.gradle.classpathcontainer"])
				node.appendNode("classpathentry",[kind:"output",path:"bin/"])	
			}
		}
	}
}